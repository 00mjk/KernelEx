/*
 *  KernelEx
 *  Copyright (C) 2008, Xeno86
 *
 *  This file is part of KernelEx source code.
 *
 *  KernelEx is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published
 *  by the Free Software Foundation; version 2 of the License.
 *
 *  KernelEx is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

#ifndef _KERNEL32_APILIST_H
#define _KERNEL32_APILIST_H

#include "kexcoresdk.h"

BOOL init_kernel32();
void uninit_kernel32();
void detach_kernel32();
extern const apilib_api_table apitable_kernel32;

/*** AUTOGENERATED APILIST DECLARATIONS BEGIN ***/
FARPROC WINAPI DelayLoadFailureHook_new(LPSTR pszDllName, LPSTR pszProcName);
BOOL WINAPI QueueUserWorkItem_new(LPTHREAD_START_ROUTINE Function, PVOID Context, ULONG Flags);
BOOL WINAPI RegisterWaitForSingleObject_new(PHANDLE phNewWaitObject, HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
BOOL WINAPI UnregisterWaitEx_new(HANDLE WaitHandle, HANDLE CompletionEvent);
HANDLE WINAPI RegisterWaitForSingleObjectEx_new(HANDLE hObject, WAITORTIMERCALLBACK Callback, PVOID Context, ULONG dwMilliseconds, ULONG dwFlags);
BOOL WINAPI UnregisterWait_new(HANDLE WaitHandle);
BOOL WINAPI DeleteTimerQueueTimer_new(HANDLE TimerQueue, HANDLE Timer, HANDLE CompletionEvent);
HANDLE WINAPI CreateTimerQueue_new(VOID);
BOOL WINAPI CreateTimerQueueTimer_new(PHANDLE phNewTimer, HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, ULONG Flags);
BOOL WINAPI DeleteTimerQueueEx_new(HANDLE TimerQueue, HANDLE CompletionEvent);
BOOL WINAPI DeleteTimerQueue_new(HANDLE TimerQueue);
BOOL WINAPI ChangeTimerQueueTimer_new(HANDLE TimerQueue, HANDLE Timer, ULONG DueTime, ULONG Period);
BOOL WINAPI CancelTimerQueueTimer_new(HANDLE TimerQueue, HANDLE Timer);
HANDLE WINAPI SetTimerQueueTimer_new(HANDLE TimerQueue, WAITORTIMERCALLBACK Callback, PVOID Parameter, DWORD DueTime, DWORD Period, BOOL PreferIo);
BOOL WINAPI BuildCommDCBAndTimeoutsW_new(LPCWSTR lpDefW, LPDCB lpDCB, LPCOMMTIMEOUTS lpCommTimeouts);
BOOL WINAPI BuildCommDCBW_new(LPCWSTR lpDefW, LPDCB lpDCB);
BOOL WINAPI CallNamedPipeW_new(LPCWSTR lpNamedPipeNameW, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesRead, DWORD nTimeOut);
BOOL WINAPI CommConfigDialogW_new(LPCWSTR lpszNameW, HWND hWnd, LPCOMMCONFIG lpCC);
HANDLE WINAPI CreateEventW_new(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCWSTR lpNameW);
HANDLE WINAPI CreateFileMappingW_new(HANDLE hFile, LPSECURITY_ATTRIBUTES lpAttributes, DWORD flProtect, DWORD dwMaximumSizeHigh, DWORD dwMaximumSizeLow, LPCWSTR lpNameW);
HANDLE WINAPI CreateMailslotW_new(LPCWSTR lpNameW, DWORD nMaxMessageSize, DWORD lReadTimeout, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
HANDLE WINAPI CreateMutexW_new(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpNameW);
HANDLE WINAPI CreateSemaphoreW_new(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes, LONG lInitialCount, LONG lMaximumCount, LPCWSTR lpNameW);
HANDLE WINAPI CreateWaitableTimerW_new(LPSECURITY_ATTRIBUTES lpTimerAttributes, BOOL bManualReset, LPCWSTR lpTimerNameW);
BOOL WINAPI EnumCalendarInfoExW_new(CALINFO_ENUMPROCEX pCalInfoEnumProcEx, LCID Locale, CALID Calendar, CALTYPE CalType);
BOOL WINAPI EnumCalendarInfoW_new(CALINFO_ENUMPROC pCalInfoEnumProc, LCID Locale, CALID Calendar, CALTYPE CalType);
BOOL WINAPI EnumDateFormatsExW_new(DATEFMT_ENUMPROCEX lpDateFmtEnumProcEx, LCID Locale, DWORD dwFlags);
BOOL WINAPI EnumDateFormatsW_new(DATEFMT_ENUMPROC lpDateFmtEnumProc, LCID Locale, DWORD dwFlags);
BOOL WINAPI EnumSystemCodePagesW_new(CODEPAGE_ENUMPROC lpCodePageEnumProc, DWORD dwFlags);
BOOL WINAPI EnumSystemLocalesW_new(LOCALE_ENUMPROC lpLocaleEnumProc, DWORD dwFlags);
BOOL WINAPI EnumTimeFormatsW_new(TIMEFMT_ENUMPROC lpTimeFmtEnumProc, LCID Locale, DWORD dwFlags);
DWORD WINAPI ExpandEnvironmentStringsW_new(LPCWSTR lpSrcW, LPWSTR lpDstW, DWORD nSize);
void WINAPI FatalAppExitW_new(UINT uAction, LPCWSTR lpMessageTextW);
BOOL WINAPI FillConsoleOutputCharacterW_new(HANDLE hConsoleOutput, WCHAR cCharacterW, DWORD nLength, COORD dwWriteCoord, LPDWORD lpNumberOfCharsWritten);
DWORD WINAPI FormatMessageW_new(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPWSTR lpBufferW, DWORD nSize, va_list* Arguments);
BOOL WINAPI GetCPInfoExW_new(UINT CodePage, DWORD dwFlags, LPCPINFOEXW lpCPInfoExW);
int WINAPI GetCalendarInfoW_new(LCID Locale, CALID Calendar, CALTYPE CalType, LPWSTR lpCalDataW, int cchData, LPDWORD lpValue);
BOOL WINAPI GetComputerNameW_new(LPWSTR lpBufferW, LPDWORD lpnSize);
DWORD WINAPI GetConsoleTitleW_new(LPWSTR lpConsoleTitleW, DWORD nSize);
int WINAPI GetCurrencyFormatW_new(LCID Locale, DWORD dwFlags, LPCWSTR lpValueW, CONST CURRENCYFMTW *lpFormatW, LPWSTR lpCurrencyStrW, int cchCurrency);
int WINAPI GetDateFormatW_new(LCID Locale, DWORD dwFlags, CONST SYSTEMTIME *lpDate, LPCWSTR lpFormatW, LPWSTR lpDateStrW, int cchDate);
UINT WINAPI GetDriveTypeW_new(LPCWSTR lpRootPathNameW);
DWORD WINAPI GetEnvironmentVariableW_new(LPCWSTR lpNameW, LPWSTR lpBufferW, DWORD nSize);
DWORD WINAPI GetLogicalDriveStringsW_new(DWORD nBufferLength, LPWSTR lpBufferW);
BOOL WINAPI GetNamedPipeHandleStateW_new(HANDLE hNamedPipe, LPDWORD lpState, LPDWORD lpCurInstances, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout, LPWSTR lpUserNameW, DWORD nMaxUserNameSize);
int WINAPI GetNumberFormatW_new(LCID Locale, DWORD dwFlags, LPCWSTR lpValueW, CONST NUMBERFMT *lpFormatW, LPWSTR lpNumberStrW, int cchNumber);
UINT WINAPI GetPrivateProfileIntW_new(LPCWSTR lpAppNameW, LPCWSTR lpKeyNameW, INT nDefault, LPCWSTR lpFileNameW);
DWORD WINAPI GetPrivateProfileSectionNamesW_new(LPWSTR lpszReturnBufferW, DWORD nSize, LPCWSTR lpFileNameW);
DWORD WINAPI GetPrivateProfileSectionW_new(LPCWSTR lpAppNameW, LPWSTR lpReturnedStringW, DWORD nSize, LPCWSTR lpFileNameW);
DWORD WINAPI GetPrivateProfileStringW_new(LPCWSTR lpAppNameW, LPCWSTR lpKeyNameW, LPCWSTR lpDefaultW, LPWSTR lpReturnedStringW, DWORD nSize, LPCWSTR lpFileNameW);
BOOL WINAPI GetPrivateProfileStructW_new(LPCWSTR lpszSectionW, LPCWSTR lpszKeyW, LPVOID lpStruct, UINT uSizeStruct, LPCWSTR szFileW);
UINT WINAPI GetProfileIntW_new(LPCWSTR lpAppNameW, LPCWSTR lpKeyNameW, INT nDefault);
DWORD WINAPI GetProfileSectionW_new(LPCWSTR lpAppNameW, LPWSTR lpReturnedStringW, DWORD nSize, LPCWSTR lpFileNameW);
DWORD WINAPI GetProfileStringW_new(LPCWSTR lpAppNameW, LPCWSTR lpKeyNameW, LPCWSTR lpDefaultW, LPWSTR lpReturnedStringW, DWORD nSize);
int WINAPI GetTimeFormatW_new(LCID Locale, DWORD dwFlags, CONST SYSTEMTIME *lpTime, LPCWSTR lpFormatW, LPWSTR lpTimeStrW, int cchTime);
BOOL WINAPI GetVolumeInformationW_new(LPCWSTR lpRootPathNameW, LPWSTR lpVolumeNameBufferW, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBufferW, DWORD nFileSystemNameSize);
BOOL WINAPI IsBadStringPtrW_new(LPCWSTR lpsz, UINT_PTR ucchMax);
/*** AUTOGENERATED APILIST DECLARATIONS END ***/

#endif
