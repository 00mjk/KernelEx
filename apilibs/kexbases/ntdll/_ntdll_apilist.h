/*
 *  KernelEx
 *  Copyright (C) 2013, Ley0k
 *
 *  This file is part of KernelEx source code.
 *
 *  KernelEx is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published
 *  by the Free Software Foundation; version 2 of the License.
 *
 *  KernelEx is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

#ifndef _NTDLL_APILIST_H
#define _NTDLL_APILIST_H

#include "ntstatus.h"
#define WIN32_NO_STATUS
#include "common.h"
#include <ntsecapi.h>
#include "../kernel32/_kernel32_apilist.h"
#include "../user32/_user32_apilist.h"

#define KEXSHUTDOWNSYSTEM	2

DWORD __fastcall VKernelExCall(DWORD command, DWORD param1);

typedef PLSA_OBJECT_ATTRIBUTES POBJECT_ATTRIBUTES;

typedef struct _CLIENT_ID
{
     DWORD UniqueProcessId;
     DWORD UniqueThreadId;
} CLIENT_ID, *PCLIENT_ID;

typedef enum _SHUTDOWN_ACTION {
	ShutdownNoReboot,
	ShutdownReboot,
	ShutdownPowerOff
} SHUTDOWN_ACTION, *PSHUTDOWN_ACTION;

//
// Responses for NtRaiseHardError
//
typedef enum _HARDERROR_RESPONSE_OPTION
{
    OptionAbortRetryIgnore,
    OptionOk,
    OptionOkCancel,
    OptionRetryCancel,
    OptionYesNo,
    OptionYesNoCancel,
    OptionShutdownSystem,
    OptionOkNoWait,
    OptionCancelTryContinue
} HARDERROR_RESPONSE_OPTION, *PHARDERROR_RESPONSE_OPTION;

typedef enum _HARDERROR_RESPONSE
{
    ResponseReturnToCaller,
    ResponseNotHandled,
    ResponseAbort,
    ResponseCancel,
    ResponseIgnore,
    ResponseNo,
    ResponseOk,
    ResponseRetry,
    ResponseYes,
    ResponseTryAgain,
    ResponseContinue
} HARDERROR_RESPONSE, *PHARDERROR_RESPONSE;


BOOL init_ntdll();
extern const apilib_api_table apitable_ntdll;

/*** AUTOGENERATED APILIST DECLARATIONS BEGIN ***/
STUB NtCreateProcess_stub;
STUB NtCreateThread_stub;
STUB ZwCreateProcess_stub;
STUB ZwCreateThread_stub;
ULONG NTAPI RtlNtStatusToDosError(NTSTATUS Status);
NTSTATUS NTAPI NtRaiseHardError(IN NTSTATUS ErrorStatus, IN ULONG NumberOfParameters, IN ULONG UnicodeStringParameterMask, IN PULONG_PTR Parameters, IN ULONG ValidResponseOptions, OUT PULONG Response);
NTSTATUS NTAPI ZwOpenProcess(OUT PHANDLE ProcessHandle, IN ACCESS_MASK AccessMask, IN POBJECT_ATTRIBUTES ObjectAttributes, IN PCLIENT_ID ClientId);
NTSTATUS NTAPI ZwResumeProcess(IN HANDLE ProcessHandle);
NTSTATUS NTAPI ZwSuspendProcess(IN HANDLE ProcessHandle);
NTSTATUS NTAPI ZwTerminateProcess(IN HANDLE ProcessHandle OPTIONAL, IN NTSTATUS ExitStatus);
NTSTATUS NTAPI ZwSetContextThread(IN HANDLE ThreadHandle, IN PCONTEXT Context);
NTSTATUS NTAPI ZwGetContextThread(IN HANDLE ThreadHandle, OUT PCONTEXT pContext);
NTSTATUS NTAPI ZwOpenThread(OUT PHANDLE ThreadHandle, IN ACCESS_MASK AccessMask, IN POBJECT_ATTRIBUTES ObjectAttributes, IN PCLIENT_ID ClientId);
NTSTATUS NTAPI ZwResumeThread(IN HANDLE ThreadHandle, OUT PULONG SuspendCount OPTIONAL);
NTSTATUS NTAPI ZwSuspendThread(IN HANDLE ThreadHandle, OUT PULONG PreviousSuspendCount OPTIONAL);
NTSTATUS NTAPI ZwTerminateThread(IN HANDLE ThreadHandle, IN NTSTATUS ExitStatus);
NTSTATUS NTAPI ZwQuerySystemInformation(IN ULONG SystemInformationClass, IN OUT PVOID SystemInformation, IN ULONG SystemInformationLength, OUT PULONG ReturnLength OPTIONAL);
NTSTATUS NTAPI ZwShutdownSystem(IN SHUTDOWN_ACTION Action);
/*** AUTOGENERATED APILIST DECLARATIONS END ***/

#endif
